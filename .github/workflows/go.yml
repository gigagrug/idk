name: Build & Release Schema

on:
  workflow_dispatch:
    inputs:
      version:
        type: string
        description: "Version (0.1.0)"
        required: true

jobs:
  build:
    name: ${{ matrix.goos }}-${{ matrix.goarch }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [windows]
        goarch: [amd64]
    steps:
      # Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Set up Go environment
      - name: Set up Go (1.24.3)
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.3"

      # Install Linux dependencies if needed
      - name: Install Dependencies (Linux Only)
        run: sudo apt-get install -y build-essential mingw-w64

      # Set the correct C compiler (CC) based on the target platform
      - name: Set CC for Cross-Compilation
        run: |
          if [ "${{ matrix.goos }}" == "linux" ]; then
            export CC=gcc
          elif [ "${{ matrix.goos }}" == "windows" ]; then
            export CC=x86_64-w64-mingw32-gcc
          fi
          echo "CC set to: $CC"
        shell: bash

      # Build the Go binary for the specified OS/Arch
      - name: Build Schema Binary
        run: |
          mkdir -p dist
          ext=""
          if [ "${{ matrix.goos }}" == "windows" ]; then
            ext=".exe"
          fi
          output_name=schema-${{ matrix.goos }}-${{ matrix.goarch }}$ext
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} CGO_ENABLED=1 CC=x86_64-w64-mingw32-gcc go build -ldflags "-X main.version=${{ inputs.version }}" -o dist/$output_name .
          echo "BINARY=dist/$output_name" >> $GITHUB_ENV

      # Create a GitHub release and upload the generated binaries
      - name: Create GitHub Release & Upload Binary
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.version }}
          name: ${{ inputs.version }}
          body: ${{ inputs.version }}
          files: ${{ env.BINARY }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
